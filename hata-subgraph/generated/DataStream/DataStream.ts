// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PriceUpdated extends ethereum.Event {
  get params(): PriceUpdated__Params {
    return new PriceUpdated__Params(this);
  }
}

export class PriceUpdated__Params {
  _event: PriceUpdated;

  constructor(event: PriceUpdated) {
    this._event = event;
  }

  get price(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DataStream__checkCallbackResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }
}

export class DataStream__checkLogResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getUpkeepNeeded(): boolean {
    return this.value0;
  }

  getPerformData(): Bytes {
    return this.value1;
  }
}

export class DataStream__checkLogInputLogStruct extends ethereum.Tuple {
  get index(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get txHash(): Bytes {
    return this[2].toBytes();
  }

  get blockNumber(): BigInt {
    return this[3].toBigInt();
  }

  get blockHash(): Bytes {
    return this[4].toBytes();
  }

  get source(): Address {
    return this[5].toAddress();
  }

  get topics(): Array<Bytes> {
    return this[6].toBytesArray();
  }

  get data(): Bytes {
    return this[7].toBytes();
  }
}

export class DataStream extends ethereum.SmartContract {
  static bind(address: Address): DataStream {
    return new DataStream("DataStream", address);
  }

  FEE_ADDRESS(): Address {
    let result = super.call("FEE_ADDRESS", "FEE_ADDRESS():(address)", []);

    return result[0].toAddress();
  }

  try_FEE_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall("FEE_ADDRESS", "FEE_ADDRESS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  STRING_DATASTREAMS_FEEDLABEL(): string {
    let result = super.call(
      "STRING_DATASTREAMS_FEEDLABEL",
      "STRING_DATASTREAMS_FEEDLABEL():(string)",
      []
    );

    return result[0].toString();
  }

  try_STRING_DATASTREAMS_FEEDLABEL(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "STRING_DATASTREAMS_FEEDLABEL",
      "STRING_DATASTREAMS_FEEDLABEL():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  STRING_DATASTREAMS_QUERYLABEL(): string {
    let result = super.call(
      "STRING_DATASTREAMS_QUERYLABEL",
      "STRING_DATASTREAMS_QUERYLABEL():(string)",
      []
    );

    return result[0].toString();
  }

  try_STRING_DATASTREAMS_QUERYLABEL(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "STRING_DATASTREAMS_QUERYLABEL",
      "STRING_DATASTREAMS_QUERYLABEL():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  checkCallback(
    values: Array<Bytes>,
    extraData: Bytes
  ): DataStream__checkCallbackResult {
    let result = super.call(
      "checkCallback",
      "checkCallback(bytes[],bytes):(bool,bytes)",
      [
        ethereum.Value.fromBytesArray(values),
        ethereum.Value.fromBytes(extraData)
      ]
    );

    return new DataStream__checkCallbackResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkCallback(
    values: Array<Bytes>,
    extraData: Bytes
  ): ethereum.CallResult<DataStream__checkCallbackResult> {
    let result = super.tryCall(
      "checkCallback",
      "checkCallback(bytes[],bytes):(bool,bytes)",
      [
        ethereum.Value.fromBytesArray(values),
        ethereum.Value.fromBytes(extraData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DataStream__checkCallbackResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  checkLog(
    log: DataStream__checkLogInputLogStruct,
    param1: Bytes
  ): DataStream__checkLogResult {
    let result = super.call(
      "checkLog",
      "checkLog((uint256,uint256,bytes32,uint256,bytes32,address,bytes32[],bytes),bytes):(bool,bytes)",
      [ethereum.Value.fromTuple(log), ethereum.Value.fromBytes(param1)]
    );

    return new DataStream__checkLogResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkLog(
    log: DataStream__checkLogInputLogStruct,
    param1: Bytes
  ): ethereum.CallResult<DataStream__checkLogResult> {
    let result = super.tryCall(
      "checkLog",
      "checkLog((uint256,uint256,bytes32,uint256,bytes32,address,bytes32[],bytes),bytes):(bool,bytes)",
      [ethereum.Value.fromTuple(log), ethereum.Value.fromBytes(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DataStream__checkLogResult(value[0].toBoolean(), value[1].toBytes())
    );
  }

  feedIds(param0: BigInt): string {
    let result = super.call("feedIds", "feedIds(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_feedIds(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("feedIds", "feedIds(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  latestETHUSDPrice(): BigInt {
    let result = super.call(
      "latestETHUSDPrice",
      "latestETHUSDPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_latestETHUSDPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestETHUSDPrice",
      "latestETHUSDPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  verifier(): Address {
    let result = super.call("verifier", "verifier():(address)", []);

    return result[0].toAddress();
  }

  try_verifier(): ethereum.CallResult<Address> {
    let result = super.tryCall("verifier", "verifier():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class CheckLogCall extends ethereum.Call {
  get inputs(): CheckLogCall__Inputs {
    return new CheckLogCall__Inputs(this);
  }

  get outputs(): CheckLogCall__Outputs {
    return new CheckLogCall__Outputs(this);
  }
}

export class CheckLogCall__Inputs {
  _call: CheckLogCall;

  constructor(call: CheckLogCall) {
    this._call = call;
  }

  get log(): CheckLogCallLogStruct {
    return changetype<CheckLogCallLogStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get value1(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class CheckLogCall__Outputs {
  _call: CheckLogCall;

  constructor(call: CheckLogCall) {
    this._call = call;
  }

  get upkeepNeeded(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get performData(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class CheckLogCallLogStruct extends ethereum.Tuple {
  get index(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get txHash(): Bytes {
    return this[2].toBytes();
  }

  get blockNumber(): BigInt {
    return this[3].toBigInt();
  }

  get blockHash(): Bytes {
    return this[4].toBytes();
  }

  get source(): Address {
    return this[5].toAddress();
  }

  get topics(): Array<Bytes> {
    return this[6].toBytesArray();
  }

  get data(): Bytes {
    return this[7].toBytes();
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get performData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}
