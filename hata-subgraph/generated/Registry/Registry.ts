// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PropertyAdded extends ethereum.Event {
  get params(): PropertyAdded__Params {
    return new PropertyAdded__Params(this);
  }
}

export class PropertyAdded__Params {
  _event: PropertyAdded;

  constructor(event: PropertyAdded) {
    this._event = event;
  }

  get landlord(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get propertyID(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get folderCID(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get title(): string {
    return this._event.parameters[3].value.toString();
  }

  get area(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class Registry__getPropertyResultValue0Struct extends ethereum.Tuple {
  get propertyID(): Bytes {
    return this[0].toBytes();
  }

  get title(): string {
    return this[1].toString();
  }

  get ownerAddress(): Address {
    return this[2].toAddress();
  }

  get area(): i32 {
    return this[3].toI32();
  }

  get folderCID(): string {
    return this[4].toString();
  }
}

export class Registry extends ethereum.SmartContract {
  static bind(address: Address): Registry {
    return new Registry("Registry", address);
  }

  addProperty(
    _title: string,
    _owner: Address,
    _area: i32,
    folderCID: string
  ): Bytes {
    let result = super.call(
      "addProperty",
      "addProperty(string,address,uint16,string):(bytes32)",
      [
        ethereum.Value.fromString(_title),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_area)),
        ethereum.Value.fromString(folderCID)
      ]
    );

    return result[0].toBytes();
  }

  try_addProperty(
    _title: string,
    _owner: Address,
    _area: i32,
    folderCID: string
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "addProperty",
      "addProperty(string,address,uint16,string):(bytes32)",
      [
        ethereum.Value.fromString(_title),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_area)),
        ethereum.Value.fromString(folderCID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getIsHashUsed(_propertyID: Bytes): boolean {
    let result = super.call("getIsHashUsed", "getIsHashUsed(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_propertyID)
    ]);

    return result[0].toBoolean();
  }

  try_getIsHashUsed(_propertyID: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getIsHashUsed",
      "getIsHashUsed(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(_propertyID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getProperty(_propertyID: Bytes): Registry__getPropertyResultValue0Struct {
    let result = super.call(
      "getProperty",
      "getProperty(bytes32):((bytes32,string,address,uint16,string))",
      [ethereum.Value.fromFixedBytes(_propertyID)]
    );

    return changetype<Registry__getPropertyResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getProperty(
    _propertyID: Bytes
  ): ethereum.CallResult<Registry__getPropertyResultValue0Struct> {
    let result = super.tryCall(
      "getProperty",
      "getProperty(bytes32):((bytes32,string,address,uint16,string))",
      [ethereum.Value.fromFixedBytes(_propertyID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Registry__getPropertyResultValue0Struct>(value[0].toTuple())
    );
  }

  getPropertyByOwner(_owner: Address): Array<Bytes> {
    let result = super.call(
      "getPropertyByOwner",
      "getPropertyByOwner(address):(bytes32[])",
      [ethereum.Value.fromAddress(_owner)]
    );

    return result[0].toBytesArray();
  }

  try_getPropertyByOwner(_owner: Address): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getPropertyByOwner",
      "getPropertyByOwner(address):(bytes32[])",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddPropertyCall extends ethereum.Call {
  get inputs(): AddPropertyCall__Inputs {
    return new AddPropertyCall__Inputs(this);
  }

  get outputs(): AddPropertyCall__Outputs {
    return new AddPropertyCall__Outputs(this);
  }
}

export class AddPropertyCall__Inputs {
  _call: AddPropertyCall;

  constructor(call: AddPropertyCall) {
    this._call = call;
  }

  get _title(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _area(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get folderCID(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class AddPropertyCall__Outputs {
  _call: AddPropertyCall;

  constructor(call: AddPropertyCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}
